[0.000000] (-) TimerEvent: {}
[0.001188] (battery_status) JobQueued: {'identifier': 'battery_status', 'dependencies': OrderedDict()}
[0.001272] (my_tutorials) JobQueued: {'identifier': 'my_tutorials', 'dependencies': OrderedDict()}
[0.001337] (pub_sub_tutorial) JobQueued: {'identifier': 'pub_sub_tutorial', 'dependencies': OrderedDict()}
[0.001401] (turtlesim_action_example) JobQueued: {'identifier': 'turtlesim_action_example', 'dependencies': OrderedDict()}
[0.001465] (battery_status) JobStarted: {'identifier': 'battery_status'}
[0.026884] (my_tutorials) JobStarted: {'identifier': 'my_tutorials'}
[0.048459] (pub_sub_tutorial) JobStarted: {'identifier': 'pub_sub_tutorial'}
[0.071883] (turtlesim_action_example) JobStarted: {'identifier': 'turtlesim_action_example'}
[0.099933] (-) TimerEvent: {}
[0.200687] (-) TimerEvent: {}
[0.301280] (-) TimerEvent: {}
[0.401890] (-) TimerEvent: {}
[0.502560] (-) TimerEvent: {}
[0.603148] (-) TimerEvent: {}
[0.703720] (-) TimerEvent: {}
[0.804391] (-) TimerEvent: {}
[0.905162] (-) TimerEvent: {}
[1.005955] (-) TimerEvent: {}
[1.106875] (-) TimerEvent: {}
[1.207598] (-) TimerEvent: {}
[1.308256] (-) TimerEvent: {}
[1.409069] (-) TimerEvent: {}
[1.509832] (-) TimerEvent: {}
[1.610474] (-) TimerEvent: {}
[1.711190] (-) TimerEvent: {}
[1.812470] (-) TimerEvent: {}
[1.914194] (-) TimerEvent: {}
[2.014977] (-) TimerEvent: {}
[2.115776] (-) TimerEvent: {}
[2.216601] (-) TimerEvent: {}
[2.317272] (-) TimerEvent: {}
[2.417941] (-) TimerEvent: {}
[2.518568] (-) TimerEvent: {}
[2.619192] (-) TimerEvent: {}
[2.719819] (-) TimerEvent: {}
[2.820398] (-) TimerEvent: {}
[2.921015] (-) TimerEvent: {}
[3.021698] (-) TimerEvent: {}
[3.122456] (-) TimerEvent: {}
[3.223078] (-) TimerEvent: {}
[3.323683] (-) TimerEvent: {}
[3.424290] (-) TimerEvent: {}
[3.524856] (-) TimerEvent: {}
[3.625441] (-) TimerEvent: {}
[3.726026] (-) TimerEvent: {}
[3.827881] (-) TimerEvent: {}
[3.928525] (-) TimerEvent: {}
[4.029234] (-) TimerEvent: {}
[4.130652] (-) TimerEvent: {}
[4.214936] (turtlesim_action_example) StderrLine: {'line': b'Traceback (most recent call last):\n  File "/usr/lib/python3/dist-packages/colcon_core/executor/__init__.py", line 91, in __call__\n    rc = await self.task(*args, **kwargs)\n  File "/usr/lib/python3/dist-packages/colcon_core/task/__init__.py", line 93, in __call__\n    return await task_method(*args, **kwargs)\n  File "/usr/lib/python3/dist-packages/colcon_ros/task/ament_python/build.py", line 51, in build\n    setup_py_data = get_setup_data(self.context.pkg, env)\n  File "/usr/lib/python3/dist-packages/colcon_core/task/python/__init__.py", line 20, in get_setup_data\n    return dict(pkg.metadata[key](env))\n  File "/usr/lib/python3/dist-packages/colcon_ros/package_augmentation/ros_ament_python.py", line 57, in getter\n    return get_setup_information(\n  File "/usr/lib/python3/dist-packages/colcon_python_setup_py/package_identification/python_setup_py.py", line 241, in get_setup_information\n    _setup_information_cache[hashable_env] = _get_setup_information(\n  File "/usr/lib/python3/dist-packages/colcon_python_setup_py/package_identification/python_setup_py.py", line 288, in _get_setup_information\n    result = subprocess.run(\n  File "/usr/lib/python3.10/subprocess.py", line 526, in run\n    raise CalledProcessError(retcode, process.args,\nsubprocess.CalledProcessError: Command \'[\'/usr/bin/python3\', \'-c\', \'import sys;from contextlib import suppress;exec("with suppress(ImportError):    from setuptools.extern.packaging.specifiers    import SpecifierSet");exec("with suppress(ImportError):    from packaging.specifiers import SpecifierSet");from distutils.core import run_setup;dist = run_setup(    \\\'setup.py\\\', script_args=(\\\'--dry-run\\\',), stop_after=\\\'config\\\');skip_keys = (\\\'cmdclass\\\', \\\'distclass\\\', \\\'ext_modules\\\', \\\'metadata\\\');data = {    key: value for key, value in dist.__dict__.items()     if (        not key.startswith(\\\'_\\\') and         not callable(value) and         key not in skip_keys and         key not in dist.display_option_names    )};data[\\\'metadata\\\'] = {    k: v for k, v in dist.metadata.__dict__.items()     if k not in (\\\'license_files\\\', \\\'provides_extras\\\')};sys.stdout.buffer.write(repr(data).encode(\\\'utf-8\\\'))\']\' returned non-zero exit status 1.\n'}
[4.217188] (turtlesim_action_example) JobEnded: {'identifier': 'turtlesim_action_example', 'rc': 1}
[4.219785] (battery_status) JobEnded: {'identifier': 'battery_status', 'rc': 'SIGINT'}
[4.220901] (my_tutorials) JobEnded: {'identifier': 'my_tutorials', 'rc': 'SIGINT'}
[4.221911] (pub_sub_tutorial) JobEnded: {'identifier': 'pub_sub_tutorial', 'rc': 'SIGINT'}
[4.227066] (-) EventReactorShutdown: {}
